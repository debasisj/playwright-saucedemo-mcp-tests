import { test, expect } from '@playwright/test';\nimport { \n  LoginPage, \n  InventoryPage, \n  CartPage, \n  CheckoutPage, \n  CheckoutCompletePage \n} from './pages';\n\ntest.describe('Sauce Demo E2E Test', () => {\n  test('Complete shopping flow from login to order confirmation', async ({ page }) => {\n    // Initialize page objects\n    const loginPage = new LoginPage(page);\n    const inventoryPage = new InventoryPage(page);\n    const cartPage = new CartPage(page);\n    const checkoutPage = new CheckoutPage(page);\n    const checkoutCompletePage = new CheckoutCompletePage(page);\n\n    // Navigate to Sauce Demo\n    await loginPage.goto();\n\n    // Verify page loaded correctly\n    await expect(page).toHaveURL('https://www.saucedemo.com/');\n    await expect(page).toHaveTitle('Swag Labs');\n\n    // Login with provided credentials\n    await loginPage.login('standard_user', 'secret_sauce');\n    \n    // Verify we're on the inventory page\n    await expect(page).toHaveURL(/inventory.html/);\n\n    // Select a random item (Sauce Labs Backpack) and add to cart\n    await inventoryPage.addItemToCart('sauce-labs-backpack');\n    \n    // Verify item was added to cart (cart badge should show 1)\n    const cartCount = await inventoryPage.getCartItemCount();\n    expect(cartCount).toBe('1');\n\n    // Verify the item is marked as added (button changed to Remove)\n    const isItemInCart = await inventoryPage.isItemInCart('sauce-labs-backpack');\n    expect(isItemInCart).toBe(true);\n\n    // Go to cart\n    await inventoryPage.goToCart();\n    await expect(page).toHaveURL(/cart.html/);\n\n    // Verify cart is not empty\n    const isCartEmpty = await cartPage.isCartEmpty();\n    expect(isCartEmpty).toBe(false);\n\n    // Store item details for validation\n    const itemName = await cartPage.getItemName();\n    const itemDescription = await cartPage.getItemDescription(itemName!);\n    const cartQuantity = await cartPage.getItemQuantity(itemName!);\n    const itemPrice = await cartPage.getItemPrice();\n\n    // Verify cart contents\n    expect(itemName).toBe('Sauce Labs Backpack');\n    expect(cartQuantity).toBe('1');\n    expect(itemDescription).toContain('carry.allTheThings()');\n    expect(itemPrice).toBe('$29.99');\n\n    // Proceed to checkout\n    await cartPage.checkout();\n    await expect(page).toHaveURL(/checkout-step-one.html/);\n\n    // Fill random personal information\n    await checkoutPage.fillPersonalInfo('John', 'Doe', '12345');\n    await checkoutPage.continue();\n\n    // Verify we're on checkout overview page\n    await expect(page).toHaveURL(/checkout-step-two.html/);\n\n    // Validate quantity and description are correct on overview page\n    const overviewQuantity = await checkoutPage.getOrderItemQuantity();\n    const overviewDescription = await checkoutPage.getOrderItemDescription();\n    const overviewItemName = await checkoutPage.getOrderItemName();\n    const overviewItemPrice = await checkoutPage.getOrderItemPrice();\n\n    expect(overviewQuantity).toBe('1');\n    expect(overviewItemName).toBe('Sauce Labs Backpack');\n    expect(overviewDescription).toContain('carry.allTheThings()');\n    expect(overviewItemPrice).toBe('$29.99');\n\n    // Verify order summary details\n    const subtotal = await checkoutPage.getSubtotal();\n    const tax = await checkoutPage.getTax();\n    const total = await checkoutPage.getTotal();\n\n    expect(subtotal).toContain('$29.99');\n    expect(tax).toContain('$2.40');\n    expect(total).toContain('$32.39');\n\n    // Finish the order\n    await checkoutPage.finish();\n\n    // Validate success page\n    await expect(checkoutCompletePage.isOnCompletePage()).resolves.toBe(true);\n    await expect(page).toHaveURL(/checkout-complete.html/);\n    \n    // Validate 'Thank you for your order!' message appears\n    const successMessage = await checkoutCompletePage.getSuccessMessage();\n    expect(successMessage).toBe('Thank you for your order!');\n\n    // Verify complete text is present\n    const completeText = await checkoutCompletePage.getCompleteText();\n    expect(completeText).toContain('dispatched');\n\n    // Verify Pony Express image is visible\n    const isPonyImageVisible = await checkoutCompletePage.isPonyExpressImageVisible();\n    expect(isPonyImageVisible).toBe(true);\n  });\n\n  test('Login with invalid credentials should show error', async ({ page }) => {\n    const loginPage = new LoginPage(page);\n\n    await loginPage.goto();\n    await loginPage.login('invalid_user', 'wrong_password');\n\n    // Should stay on login page\n    await expect(page).toHaveURL('https://www.saucedemo.com/');\n  });\n\n  test('Add multiple items to cart and verify count', async ({ page }) => {\n    const loginPage = new LoginPage(page);\n    const inventoryPage = new InventoryPage(page);\n\n    await loginPage.goto();\n    await loginPage.login('standard_user', 'secret_sauce');\n\n    // Add multiple items\n    await inventoryPage.addItemToCart('sauce-labs-backpack');\n    await inventoryPage.addItemToCart('sauce-labs-bike-light');\n\n    // Verify cart count shows 2\n    const cartCount = await inventoryPage.getCartItemCount();\n    expect(cartCount).toBe('2');\n  });\n});